{"version":3,"sources":["components/CategoryAdd.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","event","preventDefault","trim","length","prevCats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","response","json","data","gifs","map","img","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","setTimeout","useFetchGifs","gifImages","imagen","GifExpertApp","categories","rootDiv","document","getElementById","ReactDOM","render"],"mappings":"yMAkCeA,EA/BK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEtB,EAAoCC,mBAAS,QAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACC,uBAAMC,SAXc,SAACC,GACrBA,EAAMC,iBAEFJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAACS,GAAD,OAAeP,GAAf,mBAA8BO,OAE5CN,EAAc,MAKf,UACC,mEACA,sDAAyBD,KACzB,uBAAOQ,KAAK,OAAOC,MAAOT,EAAYU,SAlBd,SAACP,GAC1BF,EAAcE,EAAMQ,OAAOF,c,QCMdG,EAXK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAGjC,OACC,sBAAKC,UAAU,yDAAf,UACC,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNMK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBN,EADgB,iDACgCO,UAAUF,GAD1C,8DAGCG,MAAMR,GAHP,cAGhBS,EAHgB,gBAICA,EAASC,OAJV,uBAIdC,EAJc,EAIdA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC9B,MAAO,CACNhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAVd,kBAkBfY,GAlBe,4CAAH,sDC0BLK,EAxBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAElB,ECH2B,SAACA,GAE5B,MAA0BrB,mBAAS,CAClC2B,KAAM,GACNO,SAAS,IAFV,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAXAC,qBAAU,WACTjB,EAAQC,GAAUiB,MAAK,SAACV,GACvBW,YAAW,WACVH,EAAS,CACRT,KAAMC,EACNM,SAAS,MAER,UAEF,CAACb,IAEGc,EDhB8BK,CAAanB,GAApCoB,EAAd,EAAQd,KAAiBO,EAAzB,EAAyBA,QAEzB,OACC,qCACC,uBACA,oBAAIjB,UAAU,oDAAd,SAAmEI,IAIlEa,GAAW,mBAAGjB,UAAU,qDAAb,yBAEZ,qBAAKA,UAAU,YAAf,SACEwB,EAAUZ,KAAI,SAACa,GAGf,OAAO,cAAC,EAAD,eAAiCA,GAAfA,EAAO5B,aEmBtB6B,EAnCM,WAIpB,MAAoC3C,mBAAS,CAAC,WAA9C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAYA,OACC,qCACC,gDACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BACE6C,EAAWf,KAAI,SAACR,GAAD,OACf,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,YCxBbwB,G,MAAUC,SAASC,eAAe,SAExCC,IAASC,OAAO,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.95d473cb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst CategoryAdd = ({ setCategories }) => {\n\t//\n\tconst [inputValue, setInputValue] = useState('Pets');\n\n\tconst handleInputChange = (event) => {\n\t\tsetInputValue(event.target.value);\n\t};\n\n\tconst handleSubmit = (event) => {\n\t\tevent.preventDefault();\n\n\t\tif (inputValue.trim().length > 2) {\n\t\t\tsetCategories((prevCats) => [inputValue, ...prevCats]);\n\t\t\t//limpiar el input\n\t\t\tsetInputValue('');\n\t\t}\n\t};\n\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t<h3>Write a category and hit ENTER :D</h3>\n\t\t\t<h4>Current category :: {inputValue}</h4>\n\t\t\t<input type='text' value={inputValue} onChange={handleInputChange}></input>\n\t\t</form>\n\t);\n};\n\nCategoryAdd.propTypes = {\n\tsetCategories: PropTypes.func.isRequired,\n};\n\nexport default CategoryAdd;\n","import React from 'react';\n\n// destructuro el spread ...imagen que es un objeto en los props\nconst GifGridItem = ({ id, title, url }) => {\n\t// console.log(id, title, url);\n\n\treturn (\n\t\t<div className='card animate__animated animate__fadeIn animate__slower'>\n\t\t\t<img src={url} alt={title} />\n\t\t\t<p>{title}</p>\n\t\t</div>\n\t);\n};\n\nexport default GifGridItem;\n","/**\n * Realiza la peticion para traer 6 gifs\n */\nexport const getGifs = async (category) => {\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=9&api_key=zrE65QeG297xnvsvBATfWECzmBnxNEhP`;\n\n\tconst response = await fetch(url);\n\tconst { data } = await response.json();\n\n\tconst gifs = data.map((img) => {\n\t\treturn {\n\t\t\tid: img.id,\n\t\t\ttitle: img.title,\n\t\t\turl: img.images?.downsized_medium.url,\n\t\t};\n\t});\n\n\t// console.log(gifs);\n\n\t// setImages(gifs);\n\n\treturn gifs;\n};\n","import React from 'react';\n\nimport GifGridItem from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\n\nconst GifGrid = ({ category }) => {\n\t//ahora usando el custom hook y renombrando la data\n\tconst { data: gifImages, loading } = useFetchGifs(category);\n\n\treturn (\n\t\t<>\n\t\t\t<hr />\n\t\t\t<h3 className='animate__animated animate__bounceIn animate__slow'>{category}</h3>\n\t\t\t{/* UNa manera de hacer la condicion para mostrar cargando: */}\n\t\t\t{/* {loading ? <p>Loading ...</p> : null} */}\n\t\t\t{/* Segunda manera, mas eficiente, operador ampersant */}\n\t\t\t{loading && <p className='animate__animated animate__flash animate__repeat-2'>Loading ...</p>}\n\t\t\t{/* --------------- */}\n\t\t\t<div className='card-grid'>\n\t\t\t\t{gifImages.map((imagen) => {\n\t\t\t\t\t// return <GifGridItem key={imagen.id} img={imagen} />;\n\t\t\t\t\t// otra manera de hacerlo con el operador spread que los envia como un obj {} para luego destructurar\n\t\t\t\t\treturn <GifGridItem key={imagen.id} {...imagen} />;\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</>\n\t);\n};\n\nexport default GifGrid;\n","// es una convencion que los hooks empiezen por use...\nimport { useEffect, useState } from 'react';\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n\t// aca tambien se pueden usar hooks propios de react\n\tconst [state, setState] = useState({\n\t\tdata: [],\n\t\tloading: true,\n\t});\n\n\t// OJO el callback de use effect no puede ser async\n\tuseEffect(() => {\n\t\tgetGifs(category).then((gifs) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tsetState({\n\t\t\t\t\tdata: gifs,\n\t\t\t\t\tloading: false,\n\t\t\t\t});\n\t\t\t}, 2000);\n\t\t});\n\t}, [category]);\n\n\treturn state; // state es un objeto -> {data: [], loading: boolean}\n};\n","import React, { useState } from 'react';\n\n//componentes propios\nimport CategoryAdd from './components/CategoryAdd';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\t// asi no se hace\n\t// const categories = ['OnePunchMan', 'Samurai', 'Harry Potter', 'Dragon Ball'];\n\t//asi si\n\tconst [categories, setCategories] = useState(['Marvel']);\n\n\t// const handleAdd = () => {\n\t// \t// setCategories([...categories, 'Hell Boy']);\n\n\t// \t//Otra manera\n\n\t// \tsetCategories((catgs) => {\n\t// \t\treturn [...catgs, 'Hell Boy'];\n\t// \t});\n\t// };\n\n\treturn (\n\t\t<>\n\t\t\t<h2>Gif Expert App</h2>\n\t\t\t<hr />\n\t\t\t<CategoryAdd setCategories={setCategories} />\n\t\t\t<hr />\n\n\t\t\t{/* <button onClick={handleAdd}>Agregar categoria</button> */}\n\n\t\t\t<ol>\n\t\t\t\t{categories.map((category) => (\n\t\t\t\t\t<GifGrid key={category} category={category} />\n\t\t\t\t\t// <li key={category}> {category} </li>\n\t\t\t\t))}\n\t\t\t</ol>\n\t\t</>\n\t);\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport GifExpertApp from './GifExpertApp';\n\n// css\nimport './index.css';\n\n//elemento donde se va a renderizar\nconst rootDiv = document.getElementById('root');\n\nReactDOM.render(<GifExpertApp />, rootDiv);\n"],"sourceRoot":""}